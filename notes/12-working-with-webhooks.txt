• In Production:
    - Sendgrid makes a post to our surver with data about all the clicks in the last 30 seconds or so.
    - POST emaily.com/surveys/webhooks
    - We process list of clicks on API.

• In Development:
    - Web:
        - Sendgrid makes a post to our server with data about all the clicks in the last 30seconds or so.
        - POST webhookhelper.localtunnel.com
    - Local
        - [LocalTunnel] servver on our computer
        - POST localhost:5000

/////////////////// >> START
One quick note!

The localtunnel script appears to be crashing very often!.  

------- MacOS/Linux Directions --------
I've written a tiny script to automatically restart your localtunnel if it crashes.  Here's what to do:

In your root project directory, create a new file called sendgrid_webhook.sh .  Inside of it, add the following code:

function localtunnel {
  lt -s YOUR_SUBDOMAIN --port 5000
}
until localtunnel; do
echo "localtunnel server crashed"
sleep 2
done
Replace YOUR_SUBDOMAIN with the subdomain you picked!

Then in your package.json file, replace the "webhook" script with this:

"webhook": "./sendgrid_webhook.sh" 



------- Windows Directions --------
At the terminal, run npm install --save-dev forever 

In your root project directory, create a new file called sendgrid_webhook.js .  Add the following to that file:

var localtunnel = require('localtunnel');
localtunnel(5000, { subdomain: <YOUR_SUBDOMAIN> }, function(err, tunnel) {
  console.log('LT running')
});
Replace <YOUR_SUBDOMAIN> with the subdomain name you picked, so it should look something like 

{ subdomain: 'asdfasdf' }
In the package.json file, replace the "webhook" script with the following:

"webhook": "forever webhook.js" 
///////////////// >>> STOP


• Switch on Sendgrid Webhook Setting & Add the URL created by localtunnel npm.

• Enable webhook: 
    - Selecct ActionL Cliecked
    - Configuration.

• Need to pre-process data comming from webhook: Create Pre-Processing Pipeline.
    - Working with Object returned from webhook.
    - map
    - Extract the path from the URL.
    - Extract the survey ID and the 'choice'
    - Returned survey ID, email, and choice, discarding recording records without surveyID and choice.
    - Discard undefined.
    - Remove records with duplicate email and surveyId

• Module for pipeline.

• Queries with Mongoose:
    - Do Mongoose TEsting with node CLI.
        - By requiring modules in Node CLI: index.js